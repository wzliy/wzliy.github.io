<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - arvin's blog</title><link>https://wzliy.github.io/posts/</link><description>所有文章 | arvin's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 13 Apr 2021 09:00:00 +0800</lastBuildDate><atom:link href="https://wzliy.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>HashMap底层原理</title><link>https://wzliy.github.io/posts/hashmap/</link><pubDate>Tue, 13 Apr 2021 09:00:00 +0800</pubDate><author>作者</author><guid>https://wzliy.github.io/posts/hashmap/</guid><description><![CDATA[HashMap的底层原理
数据结构中，物理存储的数据结构只有两种，即数组和链表，其余的如树，队列，栈等数据结构都是在它们的基础上逻辑抽象而来。
HashMap的底层是数组+链表。数组被分为一个个桶，通过哈希值决定了键值对在这个数组的寻址；哈希值相同的键值对，则以链表形式存储，如果链表大小超过阈值(8)，会将链表转成红黑树存储。
/** *该表在首次使用时初始化，并调整为 * 必要的。 分配时，长度始终是2的幂。 *（我们在某些操作中也允许长度为零，以允许 *当前不需要的引导机制。） */ transient Node&lt;K,V&gt;[] table; transient Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet; transient int size; static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; { //key的哈希值  final int hash; final K key; V value; // 下一个Node，没有则为null  Node&lt;K,V&gt; next; Node(int hash, K key, V value, Node&lt;K,V&gt; next) { this.hash = hash; this.key = key; this.value = value; this.next = next; } } 可以看出，HashMap底层是table数组，数组里面的值是Entry&lt;Key, value&gt;。
在HashMap类中还定义了几个静态常量，这几个常量是一些很重要的属性，源码如下：
public class HashMap&lt;K,V&gt; extends AbstractMap&lt;K,V&gt; implements Map&lt;K,V&gt;, Cloneable, Serializable { /** * HashMap的默认初始容量大小 16 */ static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16  /** * HashMap的最大容量 2的30次方 */ static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30; /** * 负载因子，代表了table的填充度有多少，默认是0.]]></description></item><item><title>MySQL</title><link>https://wzliy.github.io/posts/mysql/</link><pubDate>Tue, 13 Apr 2021 09:00:00 +0800</pubDate><author>作者</author><guid>https://wzliy.github.io/posts/mysql/</guid><description>索引 MySQL索引的出现其实就是为了提高数据的查询效率
索引的常见模型
哈希表 有序数组 索引树 索引树 B树
B树的特征:
关键字集合分布在整棵树中 任何一个关键字出现且只出现在一个节点中； 搜索有可能在非叶子节点结束 创建高性能的索引 索引存储在引擎层，而不是服务器层。所以，不同的存储引擎的索引的工作方式并不一样。</description></item><item><title>Redis</title><link>https://wzliy.github.io/posts/redis/</link><pubDate>Tue, 13 Apr 2021 09:00:00 +0800</pubDate><author>作者</author><guid>https://wzliy.github.io/posts/redis/</guid><description>redis内核探究</description></item><item><title>Spring Cloud之Feign</title><link>https://wzliy.github.io/posts/springcloud%E4%B9%8Bfeign/</link><pubDate>Tue, 13 Apr 2021 09:00:00 +0800</pubDate><author>作者</author><guid>https://wzliy.github.io/posts/springcloud%E4%B9%8Bfeign/</guid><description>Feign的自定义配置 Feign自定义日志级别 级别 打印内容 NONE(默认值) 不记录任何日志 BASIC 仅记录请求方法、URL、响应状态码以及执行时间 HEADERS 记录BASIC的基础上，记录请求和响应的header FULL 记录请求和响应的header、body和元数据 配置方式 Java代码方式
新建configuration
public class UserCenterFeignConfiguration { } 创建bean
public class UserCenterFeignConfiguration { @Bean public Logger.Level level() { return Logger.Level.FULL; } } FeignClien注解上加上configuration配置
@FeignClient(name = &amp;#34;user-center&amp;#34;, configuration = UserCenterFeignConfiguration.class) public interface UserCenterFeignClient { ...... } application.</description></item><item><title>Spring Cloud之Ribbon</title><link>https://wzliy.github.io/posts/springcloud%E4%B9%8Brabbon/</link><pubDate>Tue, 13 Apr 2021 09:00:00 +0800</pubDate><author>作者</author><guid>https://wzliy.github.io/posts/springcloud%E4%B9%8Brabbon/</guid><description><![CDATA[Ribbon Ribbon是一个消费端的负载均衡处理器。
首先看一段代码：
// 调用user-center获取user List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(&#34;user-center&#34;); List&lt;String&gt; serviceIps = instances.stream() .map(instance -&gt; instance.getUri().toString()).collect(Collectors.toList()); int i = ThreadLocalRandom.current().nextInt(serviceIps.size()); log.info(&#34;请求服务的目标ip: {}&#34;, serviceIps.get(i)); String result = restTemplate.getForObject(url, String.class, share.getUserId()); 这段代码是用来通过注册中心获取服务的地址列表，然后随机选取一个地址来进行服务调用。
我们可以使用Ribbon来简化这个过程：
@Bean @LoadBalanced public RestTemplate restTemplate(){ return new RestTemplate(); } String url = &#34;http://user-center/notes/user/{id}&#34;; String result = restTemplate.getForObject(url, String.class, share.getUserId()); 在RestTemplate的Bean上加上注解LoadBalanced
在url中写上服务名，可直接调用该服务
我们将Ribbon做的事分解一下：
 通过服务名获取注册中心的服务地址 通过负载均衡规则，选择服务实例  Ribbon的组成
   接口 作用 默认值     IClientConfig 读取配置    IRule 负载均衡规则，选择实例    IPing 筛选掉ping不通的实例    ServerList 交给Ribbon的实例列表    ServerListFilter      ]]></description></item><item><title>Tomcat核心原理</title><link>https://wzliy.github.io/posts/tomcat%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/</link><pubDate>Tue, 13 Apr 2021 09:00:00 +0800</pubDate><author>作者</author><guid>https://wzliy.github.io/posts/tomcat%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/</guid><description>Tomact</description></item><item><title>关于</title><link>https://wzliy.github.io/posts/about/</link><pubDate>Tue, 13 Apr 2021 09:00:00 +0800</pubDate><author>作者</author><guid>https://wzliy.github.io/posts/about/</guid><description>这里是arvin的博客记录</description></item><item><title>数据结构之二叉树</title><link>https://wzliy.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91/</link><pubDate>Tue, 13 Apr 2021 09:00:00 +0800</pubDate><author>作者</author><guid>https://wzliy.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91/</guid><description>树 二叉树 二叉树，每个节点最多有两个子节点，分别是左子节点和右子节点
满二叉树：叶子节点全都在最底层，除了叶子节点之外，每个节点都有左右两个子节点
完全二叉树：叶子节点都在最底下两层，最后一层的叶子节点都靠左排列，并且除了最后一层，其他层的节点个数都要达到最大
如何存储一颗二叉树 数组存储
基于数组的顺序存储法
如果节点 X 存储在数组中下标为 i 的位置，下标为 2 * i 的位置存储的就是左子节点，下标为 2 * i + 1 的位置存储的就是右子节点。反过来，下标为 i/2 的位置存储就是它的父节点。
比如：[0, 1, 2, 3, 4, 5]</description></item><item><title>消息队列</title><link>https://wzliy.github.io/posts/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</link><pubDate>Tue, 13 Apr 2021 09:00:00 +0800</pubDate><author>作者</author><guid>https://wzliy.github.io/posts/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</guid><description>消息队列 消息对象应用场景 消息模型 消息事务 消息队列中的事务，主要解决的是消息生产者和消费者数据一致性问题。
事务是指如果我们需要对若干数据进行更新操作，为了保证这些数据的完整性和一致性，我们希望这些更新操作要么都成功，要么都失败。
事务有四大特性：
原子性：一个事务中的操作不可分割， 一致性：这些数据在事务执行这个完成时间点之前，读到的一定是事务执行前的数据，之后读到的一定是事务执行更新后的数据，不可能存在读取事务更新过程中的数据 隔离性：一个事务的执行不能被其他事务干扰 持久性：一个事务一旦完成提交，后续的其他操作和故障都不会对事务的结果产生任何影响 分布式事务 分布式系统中，严格的实现ACID这四个特性几乎是不可能的，实现代价太大，大到我们无法接受
目前大家所说的分布式事务，更多情况下，是在分布式系统中事务的不完整实现。在不同的应用场景中，有不同的实现，目的都是通过一些妥协来解决实际问题。在实际应用中，比较常见的分布式事务实现有 2PC（Two-phase Commit，也叫二阶段提交）、TCC(Try-Confirm-Cancel) 和事务消息。每一种实现都有其特定的使用场景，也有各自的问题，都不是完美的解决方案。
事务消息适用于那些需要异步更新数据，并且对数据实时性要求不太高的场景。
消息队列实现事务消息 事务消息需要消息队列提供相应的事务功能才能实现，Kafka 和 RocketMQ都提供了事务相关功能。
举例说明，订单和购物车系统
订单系统在消息队列上开启一个事务，然后，订单系统发送一个&amp;quot;半消息&amp;quot;到消息服务，这个半消息在消费端暂时不可见，当订单系统执行完本地事务成功后，再通知消息队列提交事务，消息队列才将这个消息转成消费端可消费的消息。
如果第四步提交事务消息时失败如何处理？
Kafka: 抛出异常，用户自行处理
RocketMQ：通过事务反查机制，如果在提交或者回滚事务消息时发生网络异常，RocketMQ的Broker没有收到提交或者回滚的请求，Broker会定期去反查这个事务对应的本地事务的状态，然后根据这个反查的结果决定提交或者回滚这个事务，所以，我们的业务中需要提供一个事务状态反查的接口
RocketMQ提交消息的步骤:
发送Half消息 判断Half消息发送成功 执行本地事务 提交本地事务执行结果 消息队列确认本地事务提交结果，如果未收到本地事务执行的结果，回查事务状态 通过回查事务状态接口检查本地事务 根据本地事务状态结果提交事务到消息队列 消息队列根据本地事务状态结果投递或者回滚消息 消息丢失问题 现在主流的消息队列都提供了非常完善的消息可靠性保证机制，完成可以做到，在消息传递过程中，即使发生网络中断或者硬件故障，也能确保消息的可靠传递，不丢消息。
检测消息丢失的办法 可以通过消息队列的有序性来检测消息是否丢失。原理非常简单，在 Producer 端，我们给每个发出的消息附加一个连续递增的序号，然后在 Consumer 端来检查这个序号的连续性。
实现时可利用拦截器机制，在发送消息之前的拦截器中将序号注入到消息中，在消费端消费消息的拦截器中检测序号的连续性，这样实现的好处是消息检测的代码不会侵入到你的业务代码中。
确保消息可靠传递 生产阶段: 在这个阶段，从消息在 Producer 创建出来，经过网络传输发送到 Broker 端。
存储阶段: 在这个阶段，消息在 Broker 端存储，如果是集群，消息会在这个阶段被复制到其他的副本上。
消费阶段: 在这个阶段，Consumer 从 Broker 上拉取消息，经过网络传输发送到 Consumer 上。</description></item><item><title>网络通信</title><link>https://wzliy.github.io/posts/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/</link><pubDate>Tue, 13 Apr 2021 09:00:00 +0800</pubDate><author>作者</author><guid>https://wzliy.github.io/posts/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/</guid><description>互联网的核心是一系列协议，总称&amp;quot;网络协议&amp;quot;。它们对电脑如何连接和组网，做出了详尽的规定。理解了这些协议，就理解了互联网原理。
网络七层协议
第1层：物理层 第2层：数据链路层 第3层：网络层 第4层：传输层 第5层：会话层 第6层：表示层 第7层：应用层 TCP/IP 协议</description></item></channel></rss>